// Generated by BUCKLESCRIPT VERSION 1.4.1 , PLEASE EDIT WITH CARE
'use strict';

var Caml_obj                = require("bs-platform/lib/js/caml_obj");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions");
var $$Map                   = require("bs-platform/lib/js/map");
var Caml_exceptions         = require("bs-platform/lib/js/caml_exceptions");
var Curry                   = require("bs-platform/lib/js/curry");
var List                    = require("bs-platform/lib/js/list");

function compare(param, param$1) {
  var c = Caml_obj.caml_compare(param[0], param$1[0]);
  if (c !== 0) {
    return c;
  }
  else {
    return Caml_obj.caml_compare(param[1], param$1[1]);
  }
}

var Coords_map = $$Map.Make(/* module */[/* compare */compare]);

var Id_zero_invalid = Caml_exceptions.create("Map_tree.Id_zero_invalid");

var empty = Coords_map[/* empty */0];

function add($staropt$star, id, a, t) {
  var parent_id = $staropt$star ? $staropt$star[0] : 0;
  if (!id) {
    throw Id_zero_invalid;
  }
  return Curry._3(Coords_map[/* add */3], /* tuple */[
              parent_id,
              id
            ], a, t);
}

function children_bindings(id, t) {
  return Curry._1(Coords_map[/* bindings */16], Curry._2(Coords_map[/* filter */13], function (param, _) {
                  return +(param[0] === id);
                }, t));
}

function children(id, t) {
  return List.map(function (prim) {
              return prim[1];
            }, children_bindings(id, t));
}

function roots(t) {
  return children(0, t);
}

function parent(id, t) {
  var result = [-1];
  var store_parent_id = function (param, _) {
    if (param[1] === id) {
      result[0] = param[0];
      return /* true */1;
    }
    else {
      return /* false */0;
    }
  };
  Curry._2(Coords_map[/* exists */12], store_parent_id, t);
  var result$1 = result[0];
  if (result$1 === -1) {
    throw Caml_builtin_exceptions.not_found;
  }
  else {
    return result$1;
  }
}

function remove(id, t) {
  var remove_id = function (t, id) {
    return remove(id, t);
  };
  var t$1 = Curry._2(Coords_map[/* remove */5], /* tuple */[
        parent(id, t),
        id
      ], t);
  var children_ids = List.map(function (param) {
        return param[0][1];
      }, children_bindings(id, t$1));
  return List.fold_left(remove_id, t$1, children_ids);
}

function graft($staropt$star, id, t) {
  var parent_id = $staropt$star ? $staropt$star[0] : 0;
  var p = parent(id, t);
  var a = Curry._2(Coords_map[/* find */21], /* tuple */[
        p,
        id
      ], t);
  return Curry._3(Coords_map[/* add */3], /* tuple */[
              parent_id,
              id
            ], a, Curry._2(Coords_map[/* remove */5], /* tuple */[
                  p,
                  id
                ], t));
}

function update(id, f, t) {
  var p = parent(id, t);
  return Curry._3(Coords_map[/* add */3], /* tuple */[
              p,
              id
            ], Curry._1(f, Curry._2(Coords_map[/* find */21], /* tuple */[
                      p,
                      id
                    ], t)), t);
}

exports.Id_zero_invalid = Id_zero_invalid;
exports.empty           = empty;
exports.add             = add;
exports.children        = children;
exports.roots           = roots;
exports.remove          = remove;
exports.graft           = graft;
exports.update          = update;
/* Coords_map Not a pure module */
